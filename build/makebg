

# --------------------------------------------------------------------------
#
#      4r  use 80486 timings and register argument passing
#       c  compile only
#      d1  include line number debugging information
#      d2  include full sybolic debugging information
#      ei  force enums to be of type int
#       j  change char default from unsigned to signed
#      oa  relax aliasing checking
#      od  do not optimize
#  oe[=#]  expand functions inline, # = quads (default 20)
#      oi  use the inline library functions
#      om  generate inline 80x87 code for math functions
#      ot  optimize for time
#      os  optimize for size
#      ox  maximum optimization
#       s  remove stack overflow checks
#     zp1  align structures on bytes
#      zq  use quiet mode
#  /i=dir  add include directories
#
#      mh huge memory model
#      ml large memory model
#     fpi inline 80x87 instructions with emulation
#      -o optimization: a : relax aliasing constraints
#	   zq operate quietly
#	  zp1 pack structure members with alignment 1
#     zt# set far data threshold (i.e., larger objects go in far memory)
#      wx set maximum compiler warning level (helps find unused vars)
#      zc store strings in code instead of DGROUP (large memory model only)
#     zdp forces ds register to always point to dgroup. default for medium
#     zdf allows ds register to point to other things. default for other modes
# --------------------------------------------------------------------------


# time optimized seems a LOT faster... ?
# size optimized saves around 10k

compileinstructionset = $(USE_ISA)

!ifeq compileinstructionset 1
CCOPTS = -zp1 -oaxet -oi -zq -j -mm -1 -s $(EXTERNCOPT)
!else
!ifeq compileinstructionset 2
CCOPTS = -zp1 -oaxet -oi -zq -j -mm -2 -s $(EXTERNCOPT)
!else
!ifeq compileinstructionset 3
CCOPTS = -zp1 -oaxet -oi -zq -j -mm -2 -s $(EXTERNCOPT)
!else
CCOPTS = -zp1 -oaxet -oi -zq -j -mm -0 -s $(EXTERNCOPT)
!endif
!endif
!endif



ASMOPTS = /d_USED000=0 $(EXTERNASMOPT)
 
build286chipset = $(286_CHIPSET)

!ifeq compileinstructionset 3
GLOBOBJS = $(GLOBOBJS) math386.obj
!endif

!ifeq build286chipset 1
GLOBOBJS = $(GLOBOBJS) z_scamp.obj
!endif
!ifeq build286chipset 2
GLOBOBJS = $(GLOBOBJS) z_scat.obj
!endif
!ifeq build286chipset 3
GLOBOBJS = $(GLOBOBJS) z_ht18.obj
!endif


GLOBOBJS = $(GLOBOBJS) &
 m_near.obj &
 i_init.obj &
 i_quit.obj &
 d_main.obj &
 i_ibm.obj &
 i_sound.obj &
 sm_load.obj &
 f_finale.obj &
 d_init.obj &
 s_init.obj &
 bingen.obj &
 d_net.obj &
 g_setup.obj &
 g_game.obj &
 m_menu.obj &
 m_misc.obj &
 am_map.obj &
 p_init.obj &
 p_ceilng.obj &
 p_doors.obj &
 p_enemy.obj &
 p_floor.obj &
 p_inter.obj &
 p_lights.obj &
 p_map.obj &
 p_plats.obj &
 p_pspr.obj &
 p_setup.obj &
 p_sight.obj &
 p_sight.obj &
 p_spec.obj &
 p_switch.obj &
 p_mobj.obj &
p_mobja.obj &
 p_telept.obj &
 p_tick.obj &
p_ticka.obj &
 p_user.obj &
 r_init.obj &
 r_setup.obj &
 r_bsp.obj &
 r_data.obj &
 r_draw.obj &
 r_main.obj &
 w_init.obj &
 w_wad.obj &
 v_video.obj &
 z_init.obj &
 z_zone.obj &
 st_init.obj &
 st_setup.obj &
 st_stuff.obj &
 hu_setup.obj &
 hu_stuff.obj &
 hu_lib.obj &
 wi_stuff.obj &
 s_sound.obj &
 s_sbsfx.obj &
 sm_opl2.obj &
 sm_opl3.obj &
 sm_sbmid.obj &
 sm_mpumd.obj &
 f_wipe.obj &
 f_finale.obj &
 dmx.obj &
 d_int.obj &
 memory.obj &
 math.obj &
 main.obj &
 p_saveg.obj &
 d_algo.obj &
 r_math.obj &
 r_mainhi.obj &
 r_masked.obj &
 r_column.obj &
 r_sky.obj &
 r_span.obj &
 video.obj 
 
bingen.exe : $(GLOBOBJS) 
!ifeq compileinstructionset 3
 wlink @build/bingen3.lnk 
!else
!ifeq build286chipset 1
 wlink @build/bingensc.lnk 
!else
!ifeq build286chipset 2
 wlink @build/bingenst.lnk 
!else
!ifeq build286chipset 3
 wlink @build/bingenht.lnk 
!else
 wlink @build/bingen.lnk 
!endif
!endif
!endif
!endif
 wstrip bingen.exe

obj.obj : obj\

.c.obj : 
 wcc $(CCOPTS) $[*
 
.c : build\tools\bingen\

.asm.obj :
 tasm /mx /m2 /w2 /q /zi $(ASMOPTS) $[*

clean : .SYMBOLIC
 del *.obj
 del *.err
 del bingen.exe
